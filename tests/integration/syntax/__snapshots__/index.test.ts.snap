// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`should downgrade class private method by default 1`] = `
"class Foo {
    constructor(){
        this.#bar();
    }
    #bar() {}
}
function foo(options = {}) {
    console.log(options);
}
export { Foo, foo };
"
`;

exports[`should downgrade class private method with output.syntax config 1`] = `
"var _bar = /*#__PURE__*/ new WeakSet();
class Foo {
    constructor(){
        var obj, privateSet;
        obj = this, !function(obj, privateCollection) {
            if (privateCollection.has(obj)) throw TypeError("Cannot initialize the same private elements twice on an object");
        }(obj, privateSet = _bar), privateSet.add(obj), (function(receiver, privateSet, fn) {
            if (!privateSet.has(receiver)) throw TypeError("attempted to get private field on non-instance");
            return fn;
        })(this, _bar, bar).call(this);
    }
}
function bar() {}
function foo() {
    let options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    console.log(options);
}
export { Foo, foo };
"
`;

exports[`should downgrade class private method with output.syntax config 2`] = `
"class Foo {
    constructor(){
        this.#bar();
    }
    #bar() {}
}
function foo(options = {}) {
    console.log(options);
}
export { Foo, foo };
"
`;
